@startuml
!include <C4/C4_Context>

title Контекстная диаграмма системы "Тёплый дом" (To-Be)

' Внешние пользователи и партнеры
Person(пользователь, "Пользователь", "Владелец дома, управляющий устройствами через мобильное/веб-приложение")
Person(специалист, "Специалист поддержки", "Помогает пользователям при подключении и настройке")
Person(партнер, "Производители устройств", "Предоставляют совместимые устройства (датчики, камеры, реле)")

' Внешние системы
System_Ext(устройства, "Умные устройства (датчики, реле, камеры)", "Обмениваются данными через MQTT/HTTP/WebSocket")

' Вспомогательная инфраструктура
System(kafka, "Kafka", "Брокер сообщений для асинхронного взаимодействия между сервисами")
System(redis, "Redis", "Кеширование часто запрашиваемых данных: статусы устройств, сценарии, пользователи")

' Архитектура SaaS "Тёплый дом"
System(api_gateway, "API Gateway", "Единая точка входа для всех пользователей и интеграций")

System_Boundary(saas, "Экосистема 'Тёплый дом' (SaaS)") {
  System(платежи, "Сервис платежей", "Обработка подписок и платежей")
  System(auth, "Сервис авторизации и пользователей", "Регистрация, логин, управление доступом")
  System(оркестратор, "Сервис оркестрации устройств", "Регистрация, управление и контроль устройств")
  System(отопление, "Сервис управления отоплением", "Контроль и управление отоплением")
  System(освещение, "Сервис управления освещением", "Контроль света, сценарии включения/выключения")
  System(безопасность, "Сервис безопасности", "Камеры, ворота, охранные системы")
  System(уведомления, "Сервис уведомлений", "Отправляет push, email, sms уведомления")
}

SystemDb(центральнаябд, "Централизованная БД", "Хранение пользователей, устройств, сценариев, журналов событий")

' Взаимодействия пользователей через API Gateway
Rel(пользователь, api_gateway, "Управляет устройствами и просматривает данные", "HTTPS (Web, Mobile)")
Rel(специалист, api_gateway, "Работает с пользователями через админ-панель", "HTTPS")
Rel(партнер, api_gateway, "Регистрирует свои устройства", "HTTPS (OAuth/Partner API)")

' Gateway взаимодействует с сервисами
Rel(api_gateway, auth, "Авторизация, управление пользователями", "HTTPS")
Rel(api_gateway, отопление, "Управление отоплением", "HTTPS")
Rel(api_gateway, освещение, "Управление освещением", "HTTPS")
Rel(api_gateway, безопасность, "Управление безопасностью", "HTTPS")
Rel(api_gateway, оркестратор, "Регистрация и управление устройствами", "HTTPS")

' Сервисы взаимодействуют между собой через Kafka
Rel(отопление, kafka, "Публикует события о температуре", "Kafka (асинхронно)")
Rel(освещение, kafka, "Публикует события об освещении", "Kafka (асинхронно)")
Rel(безопасность, kafka, "Публикует события тревоги", "Kafka (асинхронно)")
Rel(оркестратор, kafka, "Публикует события о подключении/отключении устройств", "Kafka (асинхронно)")

' Подписчики Kafka
Rel(kafka, уведомления, "Отправляет уведомления по событиям", "События (температура, тревоги, сценарии)")
Rel(kafka, auth, "Реагирует на события, связанные с пользователями (например, блокировка)", "События (асинхронно)")

' Взаимодействие с внешними устройствами
Rel(отопление, устройства, "Отправляет команды и получает данные", "MQTT/HTTP/WebSocket")
Rel(освещение, устройства, "Отправляет команды и получает данные", "MQTT/HTTP/WebSocket")
Rel(безопасность, устройства, "Управляет воротами, камерами", "MQTT/HTTP/WebSocket")
Rel(платежи, auth, "Проверяет подписки и тарифы", "HTTPS")
Rel(уведомления, пользователи, "Отправляет уведомления", "Push/SMS/Email")

' Базы данных
Rel(auth, центральнаябд, "Управляет пользователями", "JDBC")
Rel(оркестратор, центральнаябд, "Хранит устройства и настройки", "JDBC")
Rel(отопление, центральнаябд, "Хранит сценарии отопления", "JDBC")
Rel(освещение, центральнаябд, "Хранит сценарии освещения", "JDBC")
Rel(безопасность, центральнаябд, "Хранит сценарии безопасности", "JDBC")

' Кеширование
Rel(отопление, redis, "Читает/пишет актуальную температуру и статусы устройств", "Redis (кеш)")
Rel(освещение, redis, "Кеширует статусы освещения", "Redis (кеш)")
Rel(безопасность, redis, "Кеширует статусы охранных устройств", "Redis (кеш)")
Rel(оркестратор, redis, "Кеширует список устройств и их статусы", "Redis (кеш)")
Rel(auth, redis, "Кеширует сессии, токены", "Redis (кеш)")

@enduml